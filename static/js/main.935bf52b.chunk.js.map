{"version":3,"sources":["components/PhoneList.js","components/PhoneBook.js","App.js","serviceWorker.js","index.js"],"names":["Phone","props","user","name","number","workPlace","className","onClick","onDeleteUser","index","AddContact","state","onChangeName","e","setState","target","value","onChangeNumber","onChangeWorkPlace","type","this","onChange","onAddContact","React","Component","PhoneList","phoneUsersList","splice","contactData","newContact","push","map","PhoneBook","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAGMA,G,MAAQ,SAACC,GAEX,OACI,4BACI,4BAAKA,EAAMC,KAAKC,MAChB,4BAAKF,EAAMC,KAAKE,QAChB,4BAAKH,EAAMC,KAAKG,WAChB,4BAAI,4BAAQC,UAAU,SAASC,QAAS,WACpCN,EAAMO,aAAaP,EAAMQ,SADzB,cAOVC,E,4MACFC,MAAM,CACFR,KAAM,GACNE,UAAW,GACXD,OAAQ,I,EAGZQ,aAAa,SAACC,GACV,EAAKC,SAAS,CAACX,KAAMU,EAAEE,OAAOC,S,EAGlCC,eAAe,SAACJ,GACZ,EAAKC,SAAS,CAACV,OAAQS,EAAEE,OAAOC,S,EAGpCE,kBAAkB,SAACL,GACf,EAAKC,SAAS,CAACT,UAAWQ,EAAEE,OAAOC,S,uDAE9B,IAAD,OACJ,OACI,sCACU,2BAAOG,KAAK,OAAOH,MAAOI,KAAKT,MAAMR,KAAMkB,SAAUD,KAAKR,eADpE,IACoF,6BADpF,WAEY,2BAAOO,KAAK,OAAOH,MAAOI,KAAKT,MAAMP,OAAQiB,SAAUD,KAAKH,iBAFxE,IAE0F,6BAF1F,eAGgB,2BAAOE,KAAK,OAAOH,MAAOI,KAAKT,MAAMN,UAAWgB,SAAUD,KAAKF,oBAH/E,IAGoG,6BAChG,4BAAQZ,UAAU,UAAUC,QAAS,kBAAI,EAAKN,MAAMqB,aAAa,EAAKX,SAAtE,mB,GAxBSY,IAAMC,WAyFhBC,E,4MA1DXd,MAAQ,CACJe,eAAgB,CAAC,CACbvB,KAAM,UACNC,OAAQ,UACRC,UAAW,aAEf,CACIF,KAAM,UACNC,OAAQ,QACRC,UAAW,UAEf,CACIF,KAAM,MACNC,OAAQ,UACRC,UAAW,W,EAKnBG,aAAe,SAACC,GAAS,IACdiB,EAAkB,EAAKf,MAAvBe,eACPA,EAAeC,OAAOlB,EAAO,GAC7B,EAAKK,SAAS,CAACY,oB,EAGnBJ,aAAe,SAACM,GACZ,IAAMC,EAAaD,EACZF,EAAkB,EAAKf,MAAvBe,eACPA,EAAeI,KAAKD,GACpB,EAAKf,SAAS,CAACY,oB,uDAGV,IAAD,OACJ,OACI,yBAAKpB,UAAU,aACX,kBAAC,EAAD,CAAYgB,aAAcF,KAAKE,eAC/B,6BACA,6BACA,6BACA,yBAAKhB,UAAU,SACX,+BACI,4BACI,oCACA,sCACA,0CACA,+CAEHc,KAAKT,MAAMe,eAAeK,KAAI,SAAC7B,EAAMO,GAClC,OAAO,kBAAC,EAAD,CAAOP,KAAMA,EAAMO,MAAOA,EAAOD,aAAc,EAAKA,yB,GAjD/De,IAAMC,WChCfQ,E,uKATP,OACI,yBAAK1B,UAAU,aACX,0CACA,kBAAC,EAAD,W,GALQiB,IAAMC,WCOfS,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.935bf52b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Phone = (props) => {\r\n    \r\n    return (\r\n        <tr>\r\n            <td>{props.user.name}</td>\r\n            <td>{props.user.number}</td>\r\n            <td>{props.user.workPlace}</td>\r\n            <td><button className=\"danger\" onClick={()=>{\r\n                props.onDeleteUser(props.index)\r\n            }}>Delete</button></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nclass AddContact extends React.Component {\r\n    state={\r\n        name: \"\",\r\n        workPlace: \"\",\r\n        number: \"\"\r\n    }\r\n\r\n    onChangeName=(e)=>{\r\n        this.setState({name: e.target.value})\r\n    }\r\n\r\n    onChangeNumber=(e)=>{\r\n        this.setState({number: e.target.value})\r\n    }\r\n\r\n    onChangeWorkPlace=(e)=>{\r\n        this.setState({workPlace: e.target.value})\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                Name: <input type=\"text\" value={this.state.name} onChange={this.onChangeName}/> <br/>\r\n                Number: <input type=\"text\" value={this.state.number} onChange={this.onChangeNumber}/> <br/>\r\n                Work Place: <input type=\"text\" value={this.state.workPlace} onChange={this.onChangeWorkPlace}/> <br/>\r\n                <button className=\"add-btn\" onClick={()=>this.props.onAddContact(this.state)}>Add Number</button>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\nclass PhoneList extends React.Component{\r\n    state = {\r\n        phoneUsersList: [{\r\n            name: 'Stambek',\r\n            number: 777395395,\r\n            workPlace: 'Osh bazar'\r\n        },\r\n        {\r\n            name: 'Atakhan',\r\n            number: 9379992,\r\n            workPlace: 'Amazon'\r\n        },\r\n        {\r\n            name: 'Ali',\r\n            number: 123456789,\r\n            workPlace: 'Tesla'\r\n        }\r\n    ]\r\n    }\r\n\r\n    onDeleteUser = (index)=>{\r\n        const {phoneUsersList} = this.state\r\n        phoneUsersList.splice(index, 1)\r\n        this.setState({phoneUsersList})\r\n    }\r\n\r\n    onAddContact = (contactData)=>{\r\n        const newContact = contactData;\r\n        const {phoneUsersList} = this.state;\r\n        phoneUsersList.push(newContact);\r\n        this.setState({phoneUsersList})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='PhoneList'>\r\n                <AddContact onAddContact={this.onAddContact}/>\r\n                <br/>\r\n                <hr/>\r\n                <br/>\r\n                <div className='Phone'>\r\n                    <table>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Number</th>\r\n                            <th>Work place</th>\r\n                            <th>Delete Contact</th>\r\n                        </tr>\r\n                        {this.state.phoneUsersList.map((user, index)=>{\r\n                            return <Phone user={user} index={index} onDeleteUser={this.onDeleteUser}/>\r\n                        })}\r\n                        \r\n                    </table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PhoneList","import React from 'react';\r\nimport './PhoneBook.css';\r\nimport PhoneList from './PhoneList';\r\n\r\nclass PhoneBook extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className='PhoneBook'>\r\n                <h1>Phone Book</h1>\r\n                <PhoneList/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PhoneBook","import React from 'react';\nimport PhoneBook from './components/PhoneBook'\n\nfunction App() {\n  return (\n    <div>\n      <PhoneBook/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}